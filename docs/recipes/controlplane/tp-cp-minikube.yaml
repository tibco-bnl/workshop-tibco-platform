apiVersion: v1
kind: helm-install
meta:
  guiEnv:
    note: deploy-cp-on-prem
    GUI_CP_CHART_REPO: https://tibcosoftware.github.io/tp-helm-charts
    GUI_CP_CHART_REPO_USER_NAME: cp-test
    GUI_CP_CHART_REPO_TOKEN: ''
    GUI_DP_CHART_REPO_HOST: https://tibcosoftware.github.io
    GUI_DP_CHART_REPO_PATH: tp-helm-charts
    GUI_DP_CHART_REPO: https://tibcosoftware.github.io/tp-helm-charts
    GUI_DP_CHART_REPO_USER_NAME: cp-test
    GUI_DP_CHART_REPO_TOKEN: ''
    GUI_CP_CONTAINER_REGISTRY: csgprdusw2reposaas.jfrog.io
    GUI_CP_CONTAINER_REGISTRY_REPOSITORY: tibco-platform-docker-dev
    GUI_CP_CONTAINER_REGISTRY_USERNAME: tibco-platform-devqa
    GUI_CP_CONTAINER_REGISTRY_PASSWORD: 
    GUI_CP_PLATFORM_BOOTSTRAP_VERSION: 1.4.85
    GUI_CP_PLATFORM_BASE_VERSION: 1.4.280
    GUI_CP_INSTANCE_ID: cp1
    GUI_CP_NAMESPACE: cp1-ns
    GUI_CP_ADMIN_EMAIL: cp-test@tibco.com
    GUI_CP_LOG_ENABLE: false
    GUI_CP_EXTERNAL_ENVIRONMENT: production
    GUI_CP_RESOURCES_REQUEST_CPU: 50m
    GUI_CP_RESOURCES_REQUEST_MEMORY: 50Mi
    GUI_CP_GLOBAL_ENABLE_RESOURCE_CONSTRAINTS: true
    GUI_CP_GLOBAL_USE_SINGLE_NAMESPACE: true
    GUI_CP_EXT_NAMESPACE: tibco-ext
    GUI_CP_DNS_DOMAIN: localhost.dataplanes.pro
    GUI_TP_TLS_CERT: ''
    GUI_TP_TLS_KEY: ''
    GUI_CP_INGRESS_CLASSNAME: nginx
    GUI_CP_BOOTSTRAP_INGRESS_ROUTER: true
    GUI_CP_BOOTSTRAP_INGRESS_HYBRID_PROXY: true
    GUI_TP_GENERATE_CERTIFICATES: false
    GUI_CP_IDM_IDENTITY_MANAGEMENT_JWT_KEY_STORE_PASSWORD: easy-to-remember
    GUI_CP_STORAGE_CLASS: standard
    GUI_CP_STORAGE_CREATE_PV: false
    GUI_CP_STORAGE_PV_NAME: ''
    GUI_CP_STORAGE_PV_SIZE: 10Gi
    GUI_CP_MAIL_SERVER_TYPE: smtp
    GUI_CP_MAIL_SERVER_SES_ARN: ''
    GUI_CP_MAIL_SERVER_SENDGRID_API_KEY: ''
    GUI_CP_MAIL_SERVER_ADDRESS: ''
    GUI_CP_MAIL_SERVER_PORT_NUMBER: '1025'
    GUI_CP_MAIL_SERVER_USERNAME: ''
    GUI_CP_MAIL_SERVER_PASSWORD: ''
    GUI_CP_DB_HOST: postgresql.tibco-ext.svc.cluster.local
    GUI_CP_DB_PORT: '5432'
    GUI_CP_DB_USER_NAME: postgres
    GUI_CP_DB_PASSWORD: postgres
    GUI_CP_DB_NAME: postgres
    GUI_CP_DB_SECRET_NAME: provider-cp-database-credentials
    GUI_CP_DB_SSL_MODE: disable
    GUI_CP_DB_SSL_ROOT_CERT: ''
    GUI_CP_DB_SSL_ROOT_CERT_SECRET_NAME: db-ssl-root-cert
    GUI_CP_DB_SSL_ROOT_CERT_FILENAME: db_ssl_root.cert
    GUI_CP_DB_DELETE_ON_UNINSTALL: true
    GUI_CP_VALIDATE_CLUSTER_RESOURCE: true
    GUI_CP_CREATE_NAMESPACE: true
    GUI_CP_CROSSPLANE_ENABLED: false
    GUI_CP_INSTALL_MAILDEV: true
    GUI_CP_INSTALL_MAILDEV_INGRESS: true
    GUI_CP_INSTALL_PLATFORM_BOOTSTRAP: true
    GUI_CP_INSTALL_PLATFORM_BASE: true
    GUI_CP_INSTALL_TIBCOHUB_CONTRIB: true
    GUI_CP_INSTALL_MSG_CONTRIB: true
    GUI_CP_INSTALL_HAWK: true
    GUI_CP_INSTALL_RECIPES: true
    GUI_CP_INSTALL_INTEGRATION: true
    GUI_CP_INSTALL_INTEGRATION_BWCE: true
    GUI_CP_INSTALL_INTEGRATION_BWCE_UTILITIES: true
    GUI_CP_INSTALL_INTEGRATION_BW5: true
    GUI_CP_INSTALL_INTEGRATION_FLOGO: true
    GUI_CP_INSTALL_INTEGRATION_FLOGO_UTILITIES: true
  globalEnvVariable:
    REPLACE_RECIPE: true
    PIPELINE_LOG_DEBUG: false
    PIPELINE_CHECK_DOCKER_STATUS: false
    GITHUB_TOKEN: ${GUI_GITHUB_TOKEN}
    CP_CHART_REPO: ${GUI_CP_CHART_REPO:-"https://tibcosoftware.github.io/tp-helm-charts"}
    CP_CHART_REPO_USER_NAME: ${GUI_CP_CHART_REPO_USER_NAME:-"cp-test"}
    CP_CHART_REPO_TOKEN: ${GUI_CP_CHART_REPO_TOKEN:-""}
    DP_CHART_REPO_HOST: ${GUI_DP_CHART_REPO_HOST:-"https://tibcosoftware.github.io"}
    DP_CHART_REPO_PATH: ${GUI_DP_CHART_REPO_PATH:-"tp-helm-charts"}
    DP_CHART_REPO: ${GUI_DP_CHART_REPO:-"https://tibcosoftware.github.io/tp-helm-charts"}
    DP_CHART_REPO_USER_NAME: ${GUI_DP_CHART_REPO_USER_NAME:-"cp-test"}
    DP_CHART_REPO_TOKEN: ${GUI_DP_CHART_REPO_TOKEN:-""}
    CP_CONTAINER_REGISTRY: ${GUI_CP_CONTAINER_REGISTRY:-"csgprduswrepoedge.jfrog.io"}
    CP_CONTAINER_REGISTRY_REPOSITORY: ${GUI_CP_CONTAINER_REGISTRY_REPOSITORY:-"tibco-platform-docker-prod"}
    CP_CONTAINER_REGISTRY_USERNAME: ${GUI_CP_CONTAINER_REGISTRY_USERNAME}
    CP_CONTAINER_REGISTRY_PASSWORD: ${GUI_CP_CONTAINER_REGISTRY_PASSWORD}
    CP_CLUSTER_NAME: ${GUI_CP_CLUSTER_NAME:-"cp-cluster"}
    CP_INSTANCE_ID: ${GUI_CP_INSTANCE_ID:-"cp1"}
    CP_NAMESPACE: ${GUI_CP_NAMESPACE:-"${CP_INSTANCE_ID}-ns"}
    CP_ADMIN_EMAIL: ${GUI_CP_ADMIN_EMAIL:-"cp-test@gmail.com"}
    CP_FROM_REPLY_TO_EMAIL: ${GUI_CP_FROM_REPLY_TO_EMAIL:-""}
    CP_LOG_ENABLE: ${GUI_CP_LOG_ENABLE:-false}
    CP_EXTERNAL_ENVIRONMENT: ${GUI_CP_EXTERNAL_ENVIRONMENT:-"production"}
    CP_RESOURCES_REQUEST_CPU: ${GUI_CP_RESOURCES_REQUEST_CPU:-"50m"}
    CP_RESOURCES_REQUEST_MEMORY: ${GUI_CP_RESOURCES_REQUEST_MEMORY:-"50Mi"}
    CP_GLOBAL_ENABLE_RESOURCE_CONSTRAINTS: ${GUI_CP_GLOBAL_ENABLE_RESOURCE_CONSTRAINTS:-true}
    CP_GLOBAL_USE_SINGLE_NAMESPACE: ${GUI_CP_GLOBAL_USE_SINGLE_NAMESPACE:-true}
    CP_DNS_DOMAIN: ${GUI_CP_DNS_DOMAIN:-"localhost.dataplanes.pro"}
    CP_SERVICE_DNS_DOMAIN: ${CP_INSTANCE_ID}-my.${CP_DNS_DOMAIN}
    CP_TUNNEL_DNS_DOMAIN: ${CP_INSTANCE_ID}-tunnel.${CP_DNS_DOMAIN}
    CP_STORAGE_CLASS: ${GUI_CP_STORAGE_CLASS:-"standard"}
    CP_STORAGE_PV_NAME: ${GUI_CP_STORAGE_PV_NAME}
    CP_STORAGE_PV_SIZE: ${GUI_CP_STORAGE_PV_SIZE:-10Gi}
    CP_NODE_CIDR: ${GUI_TP_CLUSTER_NODE_CIDR:-"10.180.0.0/16"}
    CP_POD_CIDR: ${GUI_TP_CLUSTER_POD_CIDR:-"10.180.0.0/16"}
    CP_SERVICE_CIDR: ${GUI_TP_SERVICE_CIDR:-"10.96.0.0/12"}
    CP_EXT_NAMESPACE: ${GUI_CP_EXT_NAMESPACE:-"tibco-ext"}
    CP_CREATE_NETWORK_POLICIES: ${GUI_CP_CREATE_NETWORK_POLICIES:-false}
    CP_DB_HOST: ${GUI_CP_DB_HOST:-"postgresql.tibco-ext.svc.cluster.local"}
    CP_DB_PORT: ${GUI_CP_DB_PORT:-"5432"}
    CP_DB_USER_NAME: ${GUI_CP_DB_USER_NAME:-"postgres"}
    CP_DB_PASSWORD: ${GUI_CP_DB_PASSWORD:-"postgres"}
    CP_DB_NAME: ${GUI_CP_DB_NAME:-postgres}
    CP_DB_SECRET_NAME: ${GUI_CP_DB_SECRET_NAME:-provider-cp-database-credentials}
    CP_DB_SSL_MODE: ${GUI_CP_DB_SSL_MODE:-"disable"}
    CP_DB_SSL_ROOT_CERT: ${GUI_CP_DB_SSL_ROOT_CERT:-""}
    CP_DB_DELETE_ON_UNINSTALL: ${GUI_CP_DB_DELETE_ON_UNINSTALL:-"false"}
    CP_DB_SSL_ROOT_CERT_SECRET_NAME: ${GUI_CP_DB_SSL_ROOT_CERT_SECRET_NAME:-"db-ssl-root-cert"}
    CP_DB_SSL_ROOT_CERT_FILENAME: ${GUI_CP_DB_SSL_ROOT_CERT_FILENAME:-"db_ssl_root.cert"}
    CP_MAIL_MAILDEV_SERVICE_NAME: ${GUI_CP_MAIL_MAILDEV_SERVICE_NAME:-"development-mailserver"}
    CP_MAIL_SERVER_TYPE: ${GUI_CP_MAIL_SERVER_TYPE:-"smtp"}
    CP_MAIL_SERVER_SES_ARN: ${GUI_CP_MAIL_SERVER_SES_ARN:-""}
    CP_MAIL_SERVER_SENDGRID_API_KEY: ${GUI_CP_MAIL_SERVER_SENDGRID_API_KEY:-""}
    CP_MAIL_SERVER_ADDRESS: ${GUI_CP_MAIL_SERVER_ADDRESS:-"${CP_MAIL_MAILDEV_SERVICE_NAME}.${CP_EXT_NAMESPACE}.svc.cluster.local"}
    CP_MAIL_SERVER_PORT_NUMBER: ${GUI_CP_MAIL_SERVER_PORT_NUMBER:-"1025"}
    CP_MAIL_SERVER_USERNAME: ${GUI_CP_MAIL_SERVER_USERNAME:-""}
    CP_MAIL_SERVER_PASSWORD: ${GUI_CP_MAIL_SERVER_PASSWORD:-""}
    CP_IDM_IDENTITY_MANAGEMENT_JWT_KEY_STORE_PASSWORD: ${GUI_CP_IDM_IDENTITY_MANAGEMENT_JWT_KEY_STORE_PASSWORD:-"easy-to-remember"}
    CP_INGRESS_CLASSNAME: ${GUI_CP_INGRESS_CLASSNAME:-nginx}
    CP_BOOTSTRAP_INGRESS_ROUTER: ${GUI_CP_BOOTSTRAP_INGRESS_ROUTER:-true}
    CP_BOOTSTRAP_INGRESS_HYBRID_PROXY: ${GUI_CP_BOOTSTRAP_INGRESS_HYBRID_PROXY:-true}
    CP_ALB_CERTIFICATE_ARN: ''
    CP_NLB_CERTIFICATE_ARN: ''
    TP_TLS_CERT: ${GUI_TP_TLS_CERT:-""}
    TP_TLS_KEY: ${GUI_TP_TLS_KEY:-""}
    TP_GENERATE_CERTIFICATES: ${GUI_TP_GENERATE_CERTIFICATES:-true}
    TP_GENERATE_CERTIFICATE_NAME: tp-certificate-${CP_INSTANCE_ID}
    TP_CERTIFICATE_CLUSTER_ISSUER: ${GUI_TP_CERTIFICATE_CLUSTER_ISSUER:-"tp-prod"}
    CP_PLATFORM_BOOTSTRAP_VERSION: ${GUI_CP_PLATFORM_BOOTSTRAP_VERSION:-1.4.85}
    CP_PLATFORM_BASE_VERSION: ${GUI_CP_PLATFORM_BASE_VERSION:-1.4.280}
    CP_VALIDATE_CLUSTER_RESOURCE: ${GUI_CP_VALIDATE_CLUSTER_RESOURCE:-true}
    CP_CREATE_NAMESPACE: ${GUI_CP_CREATE_NAMESPACE:-true}
    CP_INSTALL_MAILDEV: ${GUI_CP_INSTALL_MAILDEV:-true}
    CP_INSTALL_MAILDEV_INGRESS: ${GUI_CP_INSTALL_MAILDEV_INGRESS:-true}
    CP_STORAGE_CREATE_PV: ${GUI_CP_STORAGE_CREATE_PV:-false}
    CP_INSTALL_PLATFORM_BOOTSTRAP: ${GUI_CP_INSTALL_PLATFORM_BOOTSTRAP:-true}
    CP_INSTALL_PLATFORM_BASE: ${GUI_CP_INSTALL_PLATFORM_BASE:-true}
    CP_INSTALL_TIBCOHUB_CONTRIB: ${GUI_CP_INSTALL_TIBCOHUB_CONTRIB:-true}
    CP_INSTALL_MSG_CONTRIB: ${GUI_CP_INSTALL_MSG_CONTRIB:-true}
    CP_INSTALL_HAWK: ${GUI_CP_INSTALL_HAWK:-true}
    CP_INSTALL_RECIPES: ${GUI_CP_INSTALL_RECIPES:-true}
    CP_INSTALL_INTEGRATION: ${GUI_CP_INSTALL_INTEGRATION:-true}
    CP_INSTALL_INTEGRATION_BWCE: ${GUI_CP_INSTALL_INTEGRATION_BWCE:-true}
    CP_INSTALL_INTEGRATION_BWCE_UTILITIES: ${GUI_CP_INSTALL_INTEGRATION_BWCE_UTILITIES:-true}
    CP_INSTALL_INTEGRATION_BW5: ${GUI_CP_INSTALL_INTEGRATION_BW5:-true}
    CP_INSTALL_INTEGRATION_FLOGO: ${GUI_CP_INSTALL_INTEGRATION_FLOGO:-true}
    CP_INSTALL_INTEGRATION_FLOGO_UTILITIES: ${GUI_CP_INSTALL_INTEGRATION_FLOGO_UTILITIES:-true}
  tools:
    yq: '4.40'
preTasks:
  - condition: ${CP_VALIDATE_CLUSTER_RESOURCE}
    clusters:
      - name: ${CP_CLUSTER_NAME}
    script:
      ignoreErrors: false
      fileName: script.sh
      content: |
        _STORAGE_CLASS=${CP_STORAGE_CLASS}
        _INGRESS_CLASS=${CP_INGRESS_CLASSNAME}

        # Function to check if a given k8s object exists
        check_k8s_object_exists() {
            local object_name="$1"
            local target_object_name="$2"

            # Check if a k8s object name is provided. empty value means use default one
            if [[ -z "${target_object_name}" ]]; then
                return 0
            fi

            # Use kubectl to check for the k8s object
            if kubectl get "${object_name}" "${target_object_name}" >/dev/null 2>&1; then
                return 0
            else
                return 1
            fi
        }

        if  ! check_k8s_object_exists "storageclass" "${_STORAGE_CLASS}"; then
          echo "Storage class is set as: ${_STORAGE_CLASS} but not exist"
          exit 1
        fi

        if  ! check_k8s_object_exists "ingressclass" "${_INGRESS_CLASS}"; then
          echo "Ingress class is set as: ${_INGRESS_CLASS} but not exist"
          exit 1
        fi
  - condition: ${CP_CREATE_NAMESPACE}
    clusters:
      - name: ${CP_CLUSTER_NAME}
    script:
      ignoreErrors: false
      fileName: script.sh
      content: "# namespace\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ${CP_NAMESPACE}\n  labels:\n    app.cloud.tibco.com/content: tibco-core\n    platform.tibco.com/controlplane-instance-id: ${CP_INSTANCE_ID}\nEOF\n\n# service account\nkubectl create -n ${CP_NAMESPACE} serviceaccount ${CP_INSTANCE_ID}-sa\nkubectl create clusterrolebinding ${CP_INSTANCE_ID}-sa --clusterrole=cluster-admin --serviceaccount=${CP_NAMESPACE}:${CP_INSTANCE_ID}-sa\n\n# DB password\nkubectl apply -f - <<EOF\nkind: Secret\napiVersion: v1\nmetadata:\n  name: ${CP_DB_SECRET_NAME}\n  namespace: ${CP_NAMESPACE}\n  labels:\n    app.kubernetes.io/managed-by: pipeline\ndata:\n  PASSWORD: $(echo ${CP_DB_PASSWORD} | base64) \n  USERNAME: $(echo ${CP_DB_USER_NAME} | base64)\ntype: Opaque\nEOF\n\n# create TP TLS secret if provided\nif [[ -n \"${TP_TLS_CERT}\" ]]; then\n  kubectl apply -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ${TP_GENERATE_CERTIFICATE_NAME}\n  namespace: ${CP_NAMESPACE}\ntype: Opaque\ndata:\n  tls.crt: ${TP_TLS_CERT}\n  tls.key: ${TP_TLS_KEY}\nEOF\nfi\n\n# add label to ext namespace\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ${CP_EXT_NAMESPACE}\n  labels:\n    networking.platform.tibco.com/non-cp-ns: enable\nEOF\n\n# create TP TLS secret if provided\nif [[ -n \"${TP_TLS_CERT}\" ]]; then\n  kubectl apply -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ${TP_GENERATE_CERTIFICATE_NAME}\n  namespace: ${CP_EXT_NAMESPACE}\ntype: Opaque\ndata:\n  tls.crt: ${TP_TLS_CERT}\n  tls.key: ${TP_TLS_KEY}\nEOF\nfi\n"
helmCharts:
  - name: generic-chart
    version: 1.1.0
    condition: ${TP_GENERATE_CERTIFICATES}
    namespace: ${CP_NAMESPACE}
    releaseName: tp-certificate
    repo:
      helm:
        url: https://test-server.github.yyzd.me
    cluster:
      names:
        - ${CP_CLUSTER_NAME}
    values:
      keepPrevious: true
      content: |
        certificate:
          enabled: ${TP_GENERATE_CERTIFICATES}
          name: ${TP_GENERATE_CERTIFICATE_NAME}
          spec:
            secretName: ${TP_GENERATE_CERTIFICATE_NAME}
            issuerRef:
              name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
              kind: ClusterIssuer
            dnsNames:
              - '*.${CP_SERVICE_DNS_DOMAIN}'
              - '*.${CP_TUNNEL_DNS_DOMAIN}'
    flags:
      createNamespace: true
      timeout: 1h
  - name: generic-chart
    version: 1.1.0
    condition: ${CP_STORAGE_CREATE_PV}
    namespace: ${CP_NAMESPACE}
    releaseName: cp-storage-pv
    repo:
      helm:
        url: https://test-server.github.yyzd.me
    cluster:
      names:
        - ${CP_CLUSTER_NAME}
    values:
      keepPrevious: true
      content: |
        pv:
          enabled: ${CP_STORAGE_CREATE_PV}
          name: ${CP_STORAGE_PV_NAME}
          spec:
            accessModes:
            - ReadWriteMany
            capacity:
              storage: ${CP_STORAGE_PV_SIZE}
            hostPath:
              path: /private/tibco/cp/${CP_STORAGE_PV_NAME}/k8s/volumes/core
              type: DirectoryOrCreate
            persistentVolumeReclaimPolicy: Retain
            volumeMode: Filesystem
            storageClassName: ${CP_STORAGE_CLASS}
    flags:
      createNamespace: true
      timeout: 1h
  - name: generic-chart
    version: 1.1.0
    condition: ${CP_INSTALL_MAILDEV}
    namespace: ${CP_EXT_NAMESPACE}
    releaseName: maildev
    repo:
      helm:
        url: https://test-server.github.yyzd.me
    cluster:
      names:
        - ${CP_CLUSTER_NAME}
    values:
      keepPrevious: true
      content: |
        deployment:
          enabled: true
          image:
            repository: maildev/maildev
            tag: latest
          args: ["-s", "1025", "-w", "1080"]
          ports:
            http:
              enabled: true
              protocol: TCP
              containerPort: 1080
          podLabels:
            app: maildev
        service:
          enabled: true
          name: ${CP_MAIL_MAILDEV_SERVICE_NAME}
          ports:
            http:
              enabled: true
              protocol: TCP
              containerPort: 1080
              servicePort: 1080
            smtp:
              enabled: true
              protocol: TCP
              containerPort: 1025
              servicePort: 1025
        ingress:
          enabled: ${CP_INSTALL_MAILDEV_INGRESS}
          labels:
            app.cloud.tibco.com/created-by: pipeline
          annotations:
            kubernetes.io/ingress.class: ${CP_INGRESS_CLASSNAME}
            nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
          spec:
            ingressClassName: ${CP_INGRESS_CLASSNAME}
            tls:
            - hosts:
              - '*.${CP_DNS_DOMAIN}'
              secretName: ${TP_GENERATE_CERTIFICATE_NAME}
            rules:
              - host: 'mail.${CP_DNS_DOMAIN}'
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: ${CP_MAIL_MAILDEV_SERVICE_NAME}
                          port:
                            number: 1080
    flags:
      createNamespace: true
      timeout: 1h
  - name: platform-bootstrap
    version: ${CP_PLATFORM_BOOTSTRAP_VERSION}
    condition: ${CP_INSTALL_PLATFORM_BOOTSTRAP}
    repo:
      helm:
        url: ${CP_CHART_REPO}
        username: ${CP_CHART_REPO_USER_NAME}
        password: ${CP_CHART_REPO_TOKEN}
    values:
      keepPrevious: false
      content: |
        tp-cp-bootstrap:
          compute-services:
            enabled: true
            resources:
              requests:
                cpu: ${CP_RESOURCES_REQUEST_CPU}
                memory: ${CP_RESOURCES_REQUEST_MEMORY}
              limits:
                cpu: 1250m
                memory: 1000Mi
            dpHelmRepositories:
              - alias: default
                conf:
                  auth:
                    password: ${DP_CHART_REPO_TOKEN}
                    username: ${DP_CHART_REPO_USER_NAME}
                  repoUrl: ${DP_CHART_REPO}
                default: true
                type: chart-museum
          hybrid-proxy:
            enabled: true
            resources:
              requests:
                cpu: ${CP_RESOURCES_REQUEST_CPU}
                memory: ${CP_RESOURCES_REQUEST_MEMORY}
              limits:
                cpu: 1250m
                memory: 1000Mi
            ingress:
              enabled: ${CP_BOOTSTRAP_INGRESS_HYBRID_PROXY}
              annotations:
                external-dns.alpha.kubernetes.io/hostname: "*.${CP_TUNNEL_DNS_DOMAIN}"
                nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
              ingressClassName: ${CP_INGRESS_CLASSNAME}
              hosts:
                - host: '*.${CP_TUNNEL_DNS_DOMAIN}'
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 105
          router-operator:
            enabled: true
            resources:
              requests:
                cpu: ${CP_RESOURCES_REQUEST_CPU}
                memory: ${CP_RESOURCES_REQUEST_MEMORY}
              limits:
                cpu: 3000m
                memory: 1000Mi
            ingress:
              enabled: ${CP_BOOTSTRAP_INGRESS_ROUTER}
              annotations:
                external-dns.alpha.kubernetes.io/hostname: "*.${CP_SERVICE_DNS_DOMAIN}"
                nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
                nginx.ingress.kubernetes.io/proxy-body-size: 200m # set to 200m to allow large file upload PCP-7954
              ingressClassName: ${CP_INGRESS_CLASSNAME}
              hosts:
                - host: '*.${CP_SERVICE_DNS_DOMAIN}'
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 100
          resource-set-operator:
            enabled: true
            resources:
              requests:
                cpu: ${CP_RESOURCES_REQUEST_CPU}
                memory: ${CP_RESOURCES_REQUEST_MEMORY}
              limits:
                cpu: 1000m
                memory: 1000Mi
          otel-collector:
            enabled: false
        global:
          external:
            clusterInfo:
              nodeCIDR: ${CP_NODE_CIDR}
              podCIDR: ${CP_POD_CIDR}
              serviceCIDR: ${CP_SERVICE_CIDR}
            dnsDomain: ${CP_SERVICE_DNS_DOMAIN}
            dnsTunnelDomain: ${CP_TUNNEL_DNS_DOMAIN}
            storage:
              resources:
                requests:
                  storage: ${CP_STORAGE_PV_SIZE}
              storageClassName: ${CP_STORAGE_CLASS}
          tibco:
            logging:
              fluentbit:
                enabled: ${CP_LOG_ENABLE} # set to true to enable fluentbit for CP
            containerRegistry:
              url: ${CP_CONTAINER_REGISTRY}
              password: "${CP_CONTAINER_REGISTRY_PASSWORD}"
              username: "${CP_CONTAINER_REGISTRY_USERNAME}"
              repository: "${CP_CONTAINER_REGISTRY_REPOSITORY}"
            controlPlaneInstanceId: ${CP_INSTANCE_ID}
            serviceAccount: ${CP_INSTANCE_ID}-sa
            createNetworkPolicy: ${CP_CREATE_NETWORK_POLICIES}
            enableResourceConstraints: ${CP_GLOBAL_ENABLE_RESOURCE_CONSTRAINTS}
            useSingleNamespace: ${CP_GLOBAL_USE_SINGLE_NAMESPACE}
    cluster:
      names:
        - ${CP_CLUSTER_NAME}
    releaseName: platform-bootstrap
    namespace: ${CP_NAMESPACE}
    flags:
      wait: true
      timeout: 1h
      createNamespace: true
      extra: '--values tls_values.yaml --values volume_values.yaml'
    hooks:
      preDeploy:
        ignoreErrors: false
        base64Encoded: false
        skip: false
        content: "# optional chart values fields\ntouch tls_values.yaml\nif [[ -n \"${TP_TLS_CERT}\" || \"${TP_GENERATE_CERTIFICATES}\" == \"true\" ]]; then\n  export _star_service_dns=\"'*.${CP_SERVICE_DNS_DOMAIN}'\"\n  export _star_tunnel_dns=\"'*.${CP_TUNNEL_DNS_DOMAIN}'\"\n  export _tp_generate_certificate_name=\"${TP_GENERATE_CERTIFICATE_NAME}\"\n  yq eval '\n    (.tp-cp-bootstrap.router-operator.ingress.tls[0].secretName = env(_tp_generate_certificate_name)) |\n    (.tp-cp-bootstrap.router-operator.ingress.tls[0].hosts[0] = env(_star_service_dns)) |\n    (.tp-cp-bootstrap.router-operator.ingress.tls[0].hosts[0] style=\"single\") |\n    (.tp-cp-bootstrap.hybrid-proxy.ingress.tls[0].secretName = env(_tp_generate_certificate_name)) |\n    (.tp-cp-bootstrap.hybrid-proxy.ingress.tls[0].hosts[0] = env(_star_tunnel_dns)) |\n    (.tp-cp-bootstrap.hybrid-proxy.ingress.tls[0].hosts[0] style=\"single\")\n    ' tls_values.yaml > tls_values.yaml\n  \n  echo \"TLS values:\"\n  cat tls_values.yaml\nfi\ntouch volume_values.yaml\nif [[ \"${CP_STORAGE_PV_NAME}\" != \"\" ]]; then\n  yq eval '.global.external.storage.volumeName = env(CP_STORAGE_PV_NAME)' volume_values.yaml > volume_values.yaml\n  echo \"Volume values:\"\n  cat volume_values.yaml\nfi\n"
  - name: platform-base
    version: ${CP_PLATFORM_BASE_VERSION}
    condition: ${CP_INSTALL_PLATFORM_BASE}
    repo:
      helm:
        url: ${CP_CHART_REPO}
        username: ${CP_CHART_REPO_USER_NAME}
        password: ${CP_CHART_REPO_TOKEN}
    values:
      keepPrevious: false
      content: |
        global:
          tibco:
            db_ssl_root_cert_secretname: "${CP_DB_SSL_ROOT_CERT_SECRET_NAME}"
            db_ssl_root_cert_filename: "${CP_DB_SSL_ROOT_CERT_FILENAME}"
            helm:
              url: "${DP_CHART_REPO_HOST}"
              repo: "${DP_CHART_REPO_PATH}"
              username: "${DP_CHART_REPO_USER_NAME}"
              password: "${DP_CHART_REPO_TOKEN}"
          cp:
            deleteDBOnUninstall: "${CP_DB_DELETE_ON_UNINSTALL}"
            enableResourceConstraints: ${CP_GLOBAL_ENABLE_RESOURCE_CONSTRAINTS}
          external:
            environment: ${CP_EXTERNAL_ENVIRONMENT}
            helmRepo: ${CP_CHART_REPO}
            db_host: ${CP_DB_HOST}
            db_name: ${CP_DB_NAME}
            db_password: ${CP_DB_PASSWORD}
            db_port: "${CP_DB_PORT}"
            db_secret_name: ${CP_DB_SECRET_NAME}
            db_ssl_mode: ${CP_DB_SSL_MODE}
            db_ssl_root_cert: "${CP_DB_SSL_ROOT_CERT}"
            db_username: ${CP_DB_USER_NAME}
            emailServerType: ${CP_MAIL_SERVER_TYPE}
            emailServer:
              ses:
                arn: "${CP_MAIL_SERVER_SES_ARN}"
              sendgrid:
                apiKey: "${CP_MAIL_SERVER_SENDGRID_API_KEY}"
              smtp:
                server: ${CP_MAIL_SERVER_ADDRESS}
                port: "${CP_MAIL_SERVER_PORT_NUMBER}"
                username: "${CP_MAIL_SERVER_USERNAME}"
                password: "${CP_MAIL_SERVER_PASSWORD}"
            fromAndReplyToEmailAddress: "${CP_FROM_REPLY_TO_EMAIL}"
            admin:
              email: ${CP_ADMIN_EMAIL}
              firstname: "admin"
              lastname: "admin"
              customerID: "myCustomerID"
            enableLogging: false
            IDENTITY_MANAGEMENT_JWT_KEY_STORE_PASSWORD: "${CP_IDM_IDENTITY_MANAGEMENT_JWT_KEY_STORE_PASSWORD}"
        tp-cp-tibcohub-contrib:
          enabled: ${CP_INSTALL_TIBCOHUB_CONTRIB}
        tp-cp-msg-contrib:
          enabled: ${CP_INSTALL_MSG_CONTRIB}
        tp-cp-hawk:
          enabled: ${CP_INSTALL_HAWK}
          tp-cp-hawk-infra-prometheus:
            prometheus:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
        tp-cp-recipes:
          enabled: ${CP_INSTALL_RECIPES}
        tp-cp-integration:
          enabled: ${CP_INSTALL_INTEGRATION}
          tp-cp-integration-common:
            fileserver:
              enabled: true
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          tp-cp-integration-bwce:
            enabled: ${CP_INSTALL_INTEGRATION_BWCE}
            bw-webserver:
              bwwebserver:
                resources:
                  requests:
                    cpu: ${CP_RESOURCES_REQUEST_CPU}
                    memory: ${CP_RESOURCES_REQUEST_MEMORY}
                  limits:
                    cpu: 200m
                    memory: 200Mi
          tp-cp-integration-bw5:
            enabled: ${CP_INSTALL_INTEGRATION_BW5}
            bw5-webserver:
              bw5webserver:
                resources:
                  requests:
                    cpu: ${CP_RESOURCES_REQUEST_CPU}
                    memory: ${CP_RESOURCES_REQUEST_MEMORY}
                  limits:
                    cpu: 200m
                    memory: 200Mi
          tp-cp-integration-flogo:
            enabled: ${CP_INSTALL_INTEGRATION_FLOGO}
            flogo-webserver:
              flogowebserver:
                resources:
                  requests:
                    cpu: ${CP_RESOURCES_REQUEST_CPU}
                    memory: ${CP_RESOURCES_REQUEST_MEMORY}
                  limits:
                    cpu: 200m
                    memory: 200Mi
          tp-cp-bwce-utilities:
            enabled: ${CP_INSTALL_INTEGRATION_BWCE_UTILITIES}
            bwce-utilities:
              studio:
                resources:
                  requests:
                    cpu: ${CP_RESOURCES_REQUEST_CPU}
                    memory: ${CP_RESOURCES_REQUEST_MEMORY}
                  limits:
                    cpu: "1"
                    memory: 2048Mi
          tp-cp-flogo-utilities:
            enabled: ${CP_INSTALL_INTEGRATION_FLOGO_UTILITIES}
        tp-cp-core:
          admin-webserver:
            replicaCount: 1
            cpadminwebserver:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          cronjobs:
            replicaCount: 1
            cpcronjobservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 100m
                  memory: 100Mi
          email-service:
            replicaCount: 1
            cpemailservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          identity-management:
            replicaCount: 1
            idm:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 400m
                  memory: 400Mi
          identity-provider:
            replicaCount: 1
            tp-cp-identity-provider:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          orchestrator:
            replicaCount: 1
            cporchservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          pengine:
            replicaCount: 1
            tpcppengineservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          user-subscriptions:
            replicaCount: 1
            cpusersubservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          web-server:
            replicaCount: 1
            cpwebserver:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
        tp-cp-core-finops:
          finops-otel-collector:
            resources:
              requests:
                cpu: ${CP_RESOURCES_REQUEST_CPU}
                memory: ${CP_RESOURCES_REQUEST_MEMORY}
              limits:
                cpu: 300m
                memory: 12Gi
          finops-prometheus:
            finopsprometheus:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 300m
                  memory: 12Gi
          finops-service:
            finopsservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 250m
                  memory: 1024Mi
          finops-web-server:
            replicaCount: "1"
            finopswebserver:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 200m
                  memory: 200Mi
          monitoring-service:
            replicaCount: "1"
            monitoringservice:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: 250m
                  memory: 1024Mi
            monitoringtibtunnel:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: "80m"
                  memory: "200Mi"
            monitoringcapresources:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: "80m"
                  memory: "200Mi"
            monitoringhomepagemetrics:
              resources:
                requests:
                  cpu: ${CP_RESOURCES_REQUEST_CPU}
                  memory: ${CP_RESOURCES_REQUEST_MEMORY}
                limits:
                  cpu: "80m"
                  memory: "200Mi"
    cluster:
      names:
        - ${CP_CLUSTER_NAME}
    releaseName: platform-base
    namespace: ${CP_NAMESPACE}
    flags:
      wait: true
      timeout: 1h
      createNamespace: true
